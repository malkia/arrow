load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(
    "//bazel:version.bzl",
    "ARROW_FULL_SO_VERSION",
    "ARROW_PACKAGE_KIND",
    "ARROW_SO_VERSION",
    "ARROW_VERSION",
    "ARROW_VERSION_MAJOR",
    "ARROW_VERSION_MINOR",
    "ARROW_VERSION_PATCH",
)

# load("@rules_cc//cc:defs.bzl", "windows_resources")

#load("@aspect_bazel_lib//lib:expand_make_vars.bzl", "expand_template")

# Root arrow C++ package

# Following CMakeLists.txt
# targets: arrow-all, arrow, arrow-benchmarks, arrow-tests, arrow-integration
# arrow-all: arrow arrow-tests arrow-benchmarks arrow-integration
# tests
# fuzzers
# benchmarks
#
# build flags:
#   ARROW_HAVE_RUNTIME_AVX2
#   ARROW_HAVE_RUNTIME_BMI2 (??) (seems to require AVX2)
#   ARROW_HAVE_RUNTIME_AVX512

package(
    default_visibility = ["//visibility:public"],
)

# Not complete rough patch from CMakeLists.txt

# From CMakeLists.txt

ARROW_SRCS = [
    "compute/kernels/hash_aggregate.cc",
    "util/cpu_info.cc",
    "compute/api_aggregate.cc",
    "compute/api_scalar.cc",
    "compute/api_vector.cc",
    "compute/cast.cc",
    "compute/exec.cc",
    "compute/function.cc",
    "compute/kernel.cc",
    "compute/kernels/aggregate_basic.cc",
    "compute/kernels/aggregate_mode.cc",
    "compute/kernels/aggregate_quantile.cc",
    "compute/kernels/aggregate_tdigest.cc",
    "compute/kernels/aggregate_var_std.cc",
    "compute/kernels/codegen_internal.cc",
    "compute/kernels/ree_util_internal.cc",
    "compute/kernels/row_encoder.cc",
    "compute/kernels/scalar_arithmetic.cc",
    "compute/kernels/scalar_boolean.cc",
    "compute/kernels/scalar_cast_boolean.cc",
    "compute/kernels/scalar_cast_dictionary.cc",
    "compute/kernels/scalar_cast_extension.cc",
    "compute/kernels/scalar_cast_internal.cc",
    "compute/kernels/scalar_cast_nested.cc",
    "compute/kernels/scalar_cast_numeric.cc",
    "compute/kernels/scalar_cast_string.cc",
    "compute/kernels/scalar_cast_temporal.cc",
    "compute/kernels/scalar_compare.cc",
    "compute/kernels/scalar_if_else.cc",
    "compute/kernels/scalar_nested.cc",
    "compute/kernels/scalar_random.cc",
    "compute/kernels/scalar_round.cc",
    "compute/kernels/scalar_set_lookup.cc",
    "compute/kernels/scalar_string_ascii.cc",
    "compute/kernels/scalar_string_utf8.cc",
    "compute/kernels/scalar_temporal_binary.cc",
    "compute/kernels/scalar_temporal_unary.cc",
    "compute/kernels/scalar_validity.cc",
    "compute/kernels/util_internal.cc",
    "compute/kernels/vector_array_sort.cc",
    "compute/kernels/vector_cumulative_ops.cc",
    "compute/kernels/vector_hash.cc",
    "compute/kernels/vector_nested.cc",
    "compute/kernels/vector_pairwise.cc",
    "compute/kernels/vector_rank.cc",
    "compute/kernels/vector_replace.cc",
    "compute/kernels/vector_run_end_encode.cc",
    "compute/kernels/vector_select_k.cc",
    "compute/kernels/vector_selection_filter_internal.cc",
    "compute/kernels/vector_selection_internal.cc",
    "compute/kernels/vector_selection_take_internal.cc",
    "compute/kernels/vector_selection.cc",
    "compute/kernels/vector_sort.cc",
    "compute/key_hash.cc",
    "compute/key_map.cc",
    "compute/light_array.cc",
    "compute/ordering.cc",
    "compute/row/compare_internal.cc",
    "compute/row/encode_internal.cc",
    "compute/row/grouper.cc",
    "compute/row/row_internal.cc",
    "compute/util.cc",
    "config.cc",
    "io/buffered.cc",
    "io/caching.cc",
    "io/compressed.cc",
    "io/file.cc",
    "io/slow.cc",
    "io/stdio.cc",
    "io/transform.cc",
    "table_builder.cc",
    "tensor.cc",
    "util/async_util.cc",
    "util/bitmap_builders.cc",
    "util/bitmap.cc",
    "util/bpacking.cc",
    "util/byte_size.cc",
    "util/compression.cc",
    "util/counting_semaphore.cc",
    "util/delimiting.cc",
    "util/dict_util.cc",
    "util/future.cc",
    "util/hashing.cc",
    "util/io_util.cc",
    "util/key_value_metadata.cc",
    "util/memory.cc",
    "util/task_group.cc",
    "util/tdigest.cc",
    "util/tracing.cc",
    "util/trie.cc",
    "util/union_util.cc",
    "util/uri.cc",
    "util/value_parsing.cc",
    "compute/kernels/aggregate_basic_avx2.cc",
    #    "compute/kernels/aggregate_basic_avx512.cc",
    #    "compute/key_hash_avx2.cc",
    #    "compute/key_map_avx2.cc",
    #    "compute/row/compare_internal_avx2.cc",
    #    "compute/row/encode_internal_avx2.cc",
    #    "compute/util_avx2.cc",
    #    "io/hdfs_internal.cc",
    #    "io/hdfs.cc",
]

ARROW_HDRS = [
    "util/cpu_info.h",
    "util/spaced.h",
    "api.h",
    "io/api.h",
    "stl.h",
    "util/rle_encoding.h",
    "util/bitmap_visit.h",
    "util/rows_to_batches.h",
    "util/bit_stream_utils.h",
    "util/cache_internal.h",
    "compute/api_aggregate.h",
    "compute/api_scalar.h",
    "compute/api_vector.h",
    "compute/api.h",
    "compute/cast_internal.h",
    "compute/cast.h",
    "compute/exec_internal.h",
    "compute/exec.h",
    "compute/expression.h",
    "compute/expression_internal.h",
    "compute/function_internal.h",
    "compute/function_options.h",
    "compute/function.h",
    "compute/kernel.h",
    "compute/kernels/aggregate_basic_internal.h",
    "compute/kernels/aggregate_internal.h",
    "compute/kernels/aggregate_var_std_internal.h",
    "compute/kernels/base_arithmetic_internal.h",
    "compute/kernels/chunked_internal.h",
    "compute/kernels/codegen_internal.h",
    "compute/kernels/common_internal.h",
    "compute/kernels/copy_data_internal.h",
    "compute/kernels/ree_util_internal.h",
    "compute/kernels/row_encoder_internal.h",
    "compute/kernels/scalar_cast_internal.h",
    "compute/kernels/scalar_string_internal.h",
    "compute/kernels/temporal_internal.h",
    "compute/kernels/util_internal.h",
    "compute/kernels/vector_selection_filter_internal.h",
    "compute/kernels/vector_selection_internal.h",
    "compute/kernels/vector_selection_take_internal.h",
    "compute/kernels/vector_sort_internal.h",
    "compute/key_hash.h",
    "compute/key_map.h",
    "compute/light_array.h",
    "compute/ordering.h",
    "compute/row/compare_internal.h",
    "compute/row/encode_internal.h",
    "compute/row/grouper_internal.h",
    "compute/row/grouper.h",
    "compute/row/row_internal.h",
    "compute/type_fwd.h",
    "compute/util_internal.h",
    "compute/util.h",
    "config.h",
    "io/buffered.h",
    "io/caching.h",
    "io/compressed.h",
    "io/file.h",
    "io/mman.h",
    "io/slow.h",
    "io/stdio.h",
    "io/transform.h",
    "table_builder.h",
    "tensor.h",
    "sparse_tensor.h",
    "util/algorithm.h",
    "util/async_generator_fwd.h",
    "util/async_generator.h",
    "util/async_util.h",
    "util/bitmap_builders.h",
    "util/map.h",
    "util/bitmap.h",
    "util/bitset_stack.h",
    "util/bpacking.h",
    "util/byte_size.h",
    "util/compression_internal.h",
    "util/compression.h",
    "util/counting_semaphore.h",
    "util/delimiting.h",
    "util/dict_util.h",
    "util/dispatch.h",
    "util/future.h",
    "util/hashing.h",
    "util/io_util.h",
    "util/key_value_metadata.h",
    "util/memory.h",
    "util/parallel.h",
    "util/print.h",
    "util/reflection_internal.h",
    "util/task_group.h",
    "util/tdigest.h",
    "util/tracing_internal.h",
    "util/tracing.h",
    "util/trie.h",
    "util/union_util.h",
    "util/uri.h",
    "util/value_parsing.h",
    "util/vector.h",
    "visit_array_inline.h",
    "visit_scalar_inline.h",
    #io/hdfs_internal.h
    #io/hdfs.h
]

CMAKE_CXX_COMPILER_ID = "todo_cmake_cxx_compiler_id"

CMAKE_CXX_COMPILER_VERSION = "todo_cmake_cxx_compiler_version"

CMAKE_CXX_FLAGS = "todo_cmake_cxx_flags"

UPPERCASE_BUILD_TYPE = "DEBUG"  # "RELEASE" ?

expand_template(
    name = "util_config_h",
    out = "util/config.h",
    substitutions = {
        "@ARROW_VERSION_MAJOR@": "%d" % ARROW_VERSION_MAJOR,
        "@ARROW_VERSION_MINOR@": "%d" % ARROW_VERSION_MINOR,
        "@ARROW_VERSION_PATCH@": "%d" % ARROW_VERSION_PATCH,
        "@ARROW_VERSION@": ARROW_VERSION,
        "@ARROW_SO_VERSION@": ARROW_SO_VERSION,
        "@ARROW_FULL_SO_VERSION@": ARROW_FULL_SO_VERSION,
        "@ARROW_GIT_DESCRIPTION@": "todo-git-description",
        "@ARROW_GIT_ID@": "todo-git-id",
        "@ARROW_PACKAGE_KIND@": ARROW_PACKAGE_KIND,
        "@CMAKE_CXX_COMPILER_ID@": CMAKE_CXX_COMPILER_ID,
        "@CMAKE_CXX_COMPILER_VERSION@": CMAKE_CXX_COMPILER_VERSION,
        "@CMAKE_CXX_FLAGS@": CMAKE_CXX_FLAGS,
        "@UPPERCASE_BUILD_TYPE@": UPPERCASE_BUILD_TYPE,
        # Example how to find uses in the code
        # git grep -E ".*#.*/bARROW_CSV/b"
        "#cmakedefine ARROW_COMPUTE": "#define ARROW_COMPUTE",
        "#cmakedefine ARROW_CSV": "#define ARROW_CSV",
        "#cmakedefine ARROW_CUDA": "",
        "#cmakedefine ARROW_DATASET": "#define ARROW_DATASET",
        "#cmakedefine ARROW_FILESYSTEM": "#define ARROW_FILESYSTEM",
        "#cmakedefine ARROW_FLIGHT_SQL": "",
        "#cmakedefine ARROW_FLIGHT": "",
        "#cmakedefine ARROW_IPC": "#define ARROW_IPC",
        "#cmakedefine ARROW_JEMALLOC_VENDORED": "",
        "#cmakedefine ARROW_JEMALLOC": "",
        "#cmakedefine ARROW_JSON": "#define ARROW_JSON",
        "#cmakedefine ARROW_ORC": "",
        "#cmakedefine ARROW_PARQUET": "#define ARROW_PARQUET",
        "#cmakedefine ARROW_SUBSTRAIT": "",
        "#cmakedefine ARROW_ENABLE_THREADING": "#define ARROW_ENABLE_THREADING",
        "#cmakedefine ARROW_GCS": "",
        "#cmakedefine ARROW_S3": "",
        "#cmakedefine ARROW_USE_NATIVE_INT128": "",  #
        "#cmakedefine ARROW_WITH_MUSL": "",
        "#cmakedefine ARROW_WITH_OPENTELEMETRY": "",
        "#cmakedefine ARROW_WITH_UCX": "",
        "#cmakedefine PARQUET_REQUIRE_ENCRYPTION": "#define PARQUET_REQUIRE_ENCRYPTION",
    },
    template = "util/config.h.cmake",
)

cc_library(
    name = "util_config",
    srcs = [
        "util/util_config.cc",
    ],
    hdrs = [
        "util/config.h",
        "util/visibility.h",
    ],
    defines = [
        "ARROW_STATIC",
        #"ARROW_EXPORTING",
    ],
    include_prefix = "arrow",
)

cc_library(
    name = "util_base64",
    hdrs = ["util/base64.h"],
    include_prefix = "arrow",
    deps = ["util_config"],
)

# Base utilities in the arrow/util folder
cc_library(
    name = "util_base",
    srcs = [
        "util/bit_util.cc",
        "util/crc32.cc",
        "util/debug.cc",
        "util/float16.cc",
        "util/logging.cc",
        "util/mutex.cc",
        "util/string_builder.cc",
        "util/unreachable.cc",
        "util/util_base.cc",
    ],
    hdrs = [
        "util/aligned_storage.h",
        "util/bit_util.h",
        "util/bitmap_writer.h",
        "util/bpacking64_default.h",
        "util/bpacking_default.h",
        "util/byte_stream_split_internal.h",
        "util/checked_cast.h",
        "util/compare.h",
        "util/concurrent_map.h",
        "util/crc32.h",
        "util/debug.h",
        "util/double_conversion.h",  # vendored/double-conversion
        "util/endian.h",
        "util/float16.h",
        "util/hash_util.h",
        "util/int128_internal.h",  # @boost//:multiprecision
        "util/launder.h",
        "util/logging.h",
        "util/macros.h",
        "util/math_constants.h",
        "util/mutex.h",
        "util/pcg_random.h",  # vendored/pcg
        "util/queue.h",  # vendored:pcq
        "util/range.h",
        "util/regex.h",
        "util/simd.h",
        "util/small_vector.h",
        "util/sort.h",
        "util/span.h",
        "util/stopwatch.h",
        "util/string_builder.h",
        "util/type_fwd.h",  # NOTE: Forwards to classes not in this library!
        "util/type_traits.h",
        "util/ubsan.h",
        "util/unreachable.h",
        "util/windows_compatibility.h",
        "util/windows_fixup.h",
    ],
    implementation_deps = [
        "//cpp/src/arrow/vendored:base64",
    ] + select({
        "//:with_glog_on": ["@glog"],
        "//conditions:default": [],
    }),
    include_prefix = "arrow",
    local_defines = [
        #"ARROW_WITH_BACKTRACE",
    ] + select({
        "//:with_glog_on": ["ARROW_USE_GLOG"],
        "//conditions:default": [],
    }) + select({
        "//:with_backtrace_on": ["ARROW_WITH_BACKTRACE"],
        "//conditions:default": [],
    }),
    deps = [
        "util_base64",
        "util_config",
        "//cpp/src/arrow/vendored:pcq",  # queue.h
        "//cpp/src/arrow/vendored/double-conversion",  # double_conversion.h
        "//cpp/src/arrow/vendored/pcg",  # pcg_random.h
        "//cpp/src/arrow/vendored/portable-snippets",  # debug.cc, but others in "base"
        "@boost//:multiprecision",  # int128_internal.h
    ],
)

cc_test(
    name = "util_bit_util_test",
    srcs = ["util/bit_util_test.cc"],
    deps = [
        "//cpp/src/arrow/testing",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "base",
    srcs = [
        "array/array_base.cc",
        "array/array_binary.cc",
        "array/array_decimal.cc",
        "array/array_dict.cc",
        "array/array_nested.cc",
        "array/array_primitive.cc",
        "array/array_run_end.cc",
        "array/builder_adaptive.cc",
        "array/builder_base.cc",
        "array/builder_binary.cc",
        "array/builder_decimal.cc",
        "array/builder_dict.cc",
        "array/builder_nested.cc",
        "array/builder_primitive.cc",
        "array/builder_run_end.cc",
        "array/builder_union.cc",
        "array/concatenate.cc",
        "array/data.cc",
        "array/diff.cc",
        "array/util.cc",
        "array/validate.cc",
        "base.cc",
        "buffer.cc",
        "builder.cc",
        "chunk_resolver.cc",
        "chunked_array.cc",
        "compare.cc",
        "compute/registry.cc",
        "datum.cc",
        "device.cc",
        "io/interfaces.cc",
        "io/memory.cc",
        "memory_pool.cc",
        "pretty_print.cc",
        "record_batch.cc",
        "result.cc",
        "scalar.cc",
        "status.cc",
        "table.cc",
        "type.cc",
        "type_traits.cc",
        "util/align_util.cc",
        "util/atfork_internal.cc",
        "util/basic_decimal.cc",
        "util/bit_block_counter.cc",
        "util/bit_run_reader.cc",
        "util/bitmap_ops.cc",
        "util/cancel.cc",
        "util/decimal.cc",
        "util/formatting.cc",
        "util/int_util.cc",
        "util/list_util.cc",
        "util/ree_util.cc",
        "util/string.cc",
        "util/thread_pool.cc",
        "util/time.cc",
        "util/utf8.cc",
        "visitor.cc",
    ] + ARROW_SRCS,
    hdrs = [
        "array.h",
        "array/array_base.h",
        "array/array_binary.h",
        "array/array_decimal.h",
        "array/array_dict.h",
        "array/array_nested.h",
        "array/array_primitive.h",
        "array/array_run_end.h",
        "array/builder_adaptive.h",
        "array/builder_base.h",
        "array/builder_binary.h",
        "array/builder_decimal.h",
        "array/builder_dict.h",
        "array/builder_nested.h",
        "array/builder_primitive.h",
        "array/builder_run_end.h",
        "array/builder_time.h",
        "array/builder_union.h",
        "array/concatenate.h",
        "array/data.h",
        "array/dict_internal.h",
        "array/diff.h",
        "array/util.h",
        "array/validate.h",
        "buffer.h",
        "buffer_builder.h",
        "builder.h",
        "chunk_resolver.h",
        "chunked_array.h",
        "compare.h",
        "compute/registry.h",
        "compute/registry_internal.h",
        "datum.h",
        "device.h",
        "extension_type.h",
        "io/concurrency.h",
        "io/interfaces.h",
        "io/memory.h",
        "io/type_fwd.h",
        "io/util_internal.h",
        "memory_pool.h",
        "memory_pool_internal.h",
        "pretty_print.h",
        "record_batch.h",
        "result.h",
        "result_internal.h",
        "scalar.h",
        "status.h",
        "stl_allocator.h",
        "stl_iterator.h",
        "table.h",
        "type.h",
        "type_fwd.h",
        "type_traits.h",
        "util/align_util.h",
        "util/atfork_internal.h",
        "util/basic_decimal.h",
        "util/binary_view_util.h",
        "util/bit_block_counter.h",
        "util/bit_run_reader.h",
        "util/bitmap_generate.h",
        "util/bitmap_ops.h",
        "util/bitmap_reader.h",
        "util/cancel.h",
        "util/decimal.h",
        "util/decimal_internal.h",
        "util/formatting.h",
        "util/functional.h",
        "util/int_util.h",
        "util/int_util_overflow.h",
        "util/iterator.h",
        "util/list_util.h",
        "util/ree_util.h",
        "util/slice_util_internal.h",
        "util/string.h",
        "util/thread_pool.h",
        "util/time.h",
        "util/utf8.h",
        "util/utf8_internal.h",
        "visit_data_inline.h",
        "visit_type_inline.h",
        "visitor.h",
        "visitor_generate.h",
    ] + ARROW_HDRS,
    defines = [
        "ARROW_WITH_LZ4",
        "ARROW_WITH_BZ2",
        "ARROW_WITH_ZSTD",
        "ARROW_WITH_ZLIB",
    ],
    include_prefix = "arrow",
    deps = [
        "util_base",
        "//cpp/src/arrow/vendored:datetime",
        "//cpp/src/arrow/vendored:strptime",
        "//cpp/src/arrow/vendored:xxhash",
        "//cpp/src/arrow/vendored/fast_float",
        "//cpp/src/arrow/vendored/uriparser",
        "//cpp/src/arrow/vendored/utfcpp",
        "//cpp/src/generated:arrow_flatbuffers",
    ],
)

cc_library(
    name = "sparse_tensor",
    srcs = ["sparse_tensor.cc"],
    deps = ["//cpp/src/arrow/tensor"],
)

cc_library(
    name = "extension_type",
    srcs = ["extension_type.cc"],
    deps = ["//cpp/src/arrow/extension"],
)

cc_library(
    name = "compression_bz2",
    srcs = ["util/compression_bz2.cc"],
    deps = [
        "@bzip2//:bz2",
        "base",
    ],
)

cc_library(
    name = "compression_lz4",
    srcs = ["util/compression_lz4.cc"],
    deps = [
        "@lz4//:lz4_frame",
        "base",
    ],
)

cc_library(
    name = "compression_zlib",
    srcs = ["util/compression_zlib.cc"],
    deps = [
        "@zlib",
        "base",
    ],
)

# Hack that writes a file that can be included as <zstd.h>
write_file(
    name = "compression_zstd_inc",
    out = "compression_zstd_inc/zstd.h",
    content = [
        "#include \"lib/zstd.h\"",
    ],
)

cc_library(
    name = "compression_zstd",
    srcs = [
        "compression_zstd_inc/zstd.h",
        "util/compression_zstd.cc",
    ],
    includes = ["compression_zstd_inc"],
    deps = [
        "@zstd",
        "base",
    ],
)

cc_library(
    name = "compute_expression",
    srcs = [
        "compute/expression.cc",
        "compute/function_internal.cc",
    ],
    include_prefix = "arrow",
    deps = [
        "base",
        "//cpp/src/arrow/ipc",
    ],
)

cc_library(
    name = "arrow",
    deps = [
        # TODO(malkia): Add snappy/brotli too
        "base",
        "compression_bz2",
        "compression_lz4",
        "compression_zstd",
        "compression_zlib",
        "extension_type",
        "sparse_tensor",
        "compute_expression",
        "//cpp/src/arrow/filesystem",
        "//cpp/src/arrow/ipc",
        "//cpp/src/arrow/json",
    ],
)

# cc_binary(
#     name = "arrow_sdk",
#     linkshared = True,
#     linkopts = ["/WHOLEARCHIVE", "/FORCE"], 
#     deps = [
#         "arrow",
#     ]
# )

cc_library(
    name = "test_common",
    testonly = 1,
    srcs = [
        "compute/kernels/test_util.cc",
        "io/test_common.cc",
        "util/test_common.cc",
    ],
    hdrs = [
        "compute/kernels/test_util.h",
        "io/test_common.h",
        "memory_pool_test.h",
        "util/test_common.h",
    ],
    include_prefix = "arrow",
    deps = [
        "//cpp/src/arrow/testing",
    ],
)

[cc_test(
    name = name.replace("/", "_"),
    srcs = [name + ".cc"],
    features = [
        "generate_pdb_file",
    ],
    deps = [
        "test_common",
        "//cpp/src/arrow/csv:test_common",
        "//cpp/src/arrow/dataset",
        "//cpp/src/arrow/dataset:file_csv",
        "//cpp/src/arrow/ipc:test_common",
        "@googletest//:gtest_main",
    ],
) for name in [
    "buffer_test",
    "chunked_array_test",
    "datum_test",
    "extension_type_test",
    "field_ref_test",
    "memory_pool_test",
    "pretty_print_test",
    "public_api_test",
    "record_batch_test",
    "result_test",
    "scalar_test",
    "sparse_tensor_test",
    "status_test",
    "stl_iterator_test",
    "stl_test",
    "table_builder_test",
    "table_test",
    "tensor_test",
    "type_test",
    "array/array_binary_test",
    "array/array_dict_test",
    "array/array_list_test",
    "array/array_list_view_test",
    "array/array_run_end_test",
    "array/array_struct_test",
    "array/array_test",
    "array/array_union_test",
    "array/array_view_test",
    "array/concatenate_test",
    "array/diff_test",
    "util/align_util_test",
    "util/async_generator_test",
    "util/async_util_test",
    "util/atfork_test",
    "util/bit_block_counter_test",
    "util/byte_size_test",
    "util/byte_stream_split_test",
    "util/cache_test",
    "util/cancel_test",
    "util/checked_cast_test",
    "util/compression_test",
    "util/counting_semaphore_test",
    #    "util/crc32_test", # needs boost, duh!
    "util/decimal_test",
    "util/float16_test",
    "util/formatting_util_test",
    "util/future_test",
    "util/hashing_test",
    "util/int_util_test",
    "util/io_util_test",
    #    "util/io_util_test.manifest",
    #    "util/io_util_test.rc",
    "util/iterator_test",
    "util/key_value_metadata_test",
    "util/list_util_test",
    "util/logging_test",
    "util/queue_test",
    "util/range_test",
    "util/ree_util_test",
    "util/reflection_test",
    "util/rle_encoding_test",
    "util/rows_to_batches_test",
    "util/small_vector_test",
    "util/span_test",
    "util/stl_util_test",
    "util/string_test",
    "util/task_group_test",
    "util/tdigest_test",
    "util/thread_pool_test",
    "util/time_test",
    "util/tracing_test",
    "util/trie_test",
    "util/uri_test",
    "util/utf8_util_test",
    "util/value_parsing_test",
]]

cc_library(
    name = "benchmark_common",
    srcs = [
        "util/benchmark_main.cc",
    ],
    hdrs = [
        "util/benchmark_util.h",
    ],
    include_prefix = "arrow",
    deps = [
        "@google_benchmark//:benchmark",
    ],
)

[cc_test(
    name = name.replace("/", "_"),
    srcs = [name + ".cc"],
    features = [
        "generate_pdb_file",
    ],
    deps = [
        "benchmark_common",
        "test_common",
    ],
) for name in [
    "compute/function_benchmark",
    "compute/kernels/scalar_arithmetic_benchmark",
    "compute/kernels/scalar_boolean_benchmark",
    "compute/kernels/scalar_cast_benchmark",
    "compute/kernels/scalar_compare_benchmark",
    "compute/kernels/scalar_if_else_benchmark",
    "compute/kernels/scalar_random_benchmark",
    "compute/kernels/scalar_round_benchmark",
    "compute/kernels/scalar_set_lookup_benchmark",
    "compute/kernels/scalar_string_benchmark",
    "compute/kernels/scalar_temporal_benchmark",
    "compute/kernels/vector_hash_benchmark",
    "compute/kernels/vector_partition_benchmark",
    "compute/kernels/vector_replace_benchmark",
    "compute/kernels/vector_selection_benchmark",
    "compute/kernels/vector_sort_benchmark",
    "compute/kernels/vector_topk_benchmark",
    "builder_benchmark",
]]
